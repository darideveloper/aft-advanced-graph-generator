---
interface Props {
  value: number;
  color: string;
  percentage: number;
  promedio?: number;
  class?: string;
  min: number;
  max: number;
}

const {
  value,
  color,
  percentage,
  promedio,
  class: className = "",
  min,
  max,
} = Astro.props;

const bgColor = color.split(" ").find((c) => c.startsWith("bg-")) || "";
const borderColor = color.split(" ").find((c) => c.startsWith("border-")) || "";

// Calculate actual percentage based on min/max values
const actualPercentage = Math.min(100, Math.max(0, ((percentage - min) / (max - min)) * 100));
const actualValuePercentage = Math.min(100, Math.max(0, ((value - min) / (max - min)) * 100));

// Use dynamic width and position based on calculated percentages
const barWidth = `${actualPercentage}%`;
const barPosition = `${actualValuePercentage}%`;

// Calculate promedio position if provided
const promedioPercentage = promedio ? Math.min(100, Math.max(0, ((promedio - min) / (max - min)) * 100)) : 0;
const promedioPosition = `${promedioPercentage}%`;
---

<div class:list={["w-full", className]}>
  <div class:list={["flex", "items-center", "gap-2"]}>
    <div class:list={["flex-1", "relative"]}>
      <div class:list={["w-full", "bg-gray-200", "rounded-lg", "h-8"]}>
        <div
          class:list={[
            "h-full",
            "rounded-md",
            "transition-all",
            "duration-500",
            "ease-out",
            "relative",
            "z-10",
            bgColor,
          ]}
          style={`width: ${barWidth}`}
        >
          <div
            class:list={[
              "absolute",
              "top-1/2",
              "-translate-y-1/2",
              "bg-white",
              "px-2",
              "py-2",
              "text-black",
              "font-bold",
              "text-sm",
              "rounded-md",
              "border-4",
              "z-20",
              borderColor,
            ]}
            style={`left: ${barPosition}`}
          >
            {Math.round(value)}
          </div>
        </div>

        {
          promedio !== undefined && (
            <div
              class:list={[
                "absolute",
                "top-0",
                "h-full",
                "w-1",
                "bg-gray-600",
                "z-30",
                "-translate-x-1/2",
              ]}
              style={`left: ${promedioPosition}`}
              data-avg={promedio}
            >
            </div>
          )
        }
      </div>
    </div>
  </div>
</div>